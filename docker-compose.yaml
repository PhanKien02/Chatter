services:
  # RabbitMQ
  rabbitmq-service:
    image: rabbitmq:3-management
    container_name: rabbitmq-service
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  # MySQL cho Auth Service
  auth-db:
    image: mysql:8
    container_name: auth-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: auth_db
      MYSQL_USER: auth_user
      MYSQL_PASSWORD: auth_pass
    ports:
      - "3307:3306"
    volumes:
      - auth-db-data:/var/lib/mysql
    networks:
      - app-network

  # MySQL cho User Service
  user-db:
    image: mysql:8
    container_name: user-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_db
      MYSQL_USER: user_user
      MYSQL_PASSWORD: user_pass
    ports:
      - "3308:3306"
    volumes:
      - user-db-data:/var/lib/mysql
    networks:
      - app-network

  # Gateway Service
  gateway:
    build:
      context: ./microservices/gateway
      dockerfile: Dockerfile
    container_name: microservice-gateway
    restart: always
    ports:
      - 3000:3000
    networks:
      - app-network
    depends_on:
      - auth-service
      - user-service

  # Auth Service
  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    container_name: microservice-auth
    restart: always
    depends_on:
      - rabbitmq-service
      - auth-db
    networks:
      - app-network

  # User Service
  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    container_name: microservice-user
    restart: always
    depends_on:
      - rabbitmq-service
      - user-db
    networks:
      - app-network

  # Notification Service
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: microservice-notification
    restart: always
    depends_on:
      - rabbitmq-service
    networks:
      - app-network   
  # Web Frontend (Next.js)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: nextjs-web
    restart: always
    ports:
      - "3001:3000"
    depends_on:
      - gateway
    networks:
      - app-network
volumes:
  auth-db-data:
  user-db-data:
networks:
  app-network:
    driver: bridge
